#pragma once

#include "ApplicationGlobalState.h"
#include "RenderingSystem.h"
#include "Engine/Core/Modules/EngineModuleContext.h"
#include "System/Core/Settings/SettingsRegistry.h"
#include "System/Core/Update/UpdateContext.h"

// Engine modules
//-------------------------------------------------------------------------

#include "Applications/Shared/_AutoGenerated/EngineTypeRegistration.h"

//-------------------------------------------------------------------------

namespace KRG
{
    class EngineApplication
    {
        class EngineUpdateContext : public UpdateContext
        {
            friend EngineApplication;
        };

    public:

        EngineApplication() : m_module_engine_core( m_settingsRegistry ) {}
        virtual ~EngineApplication() = default;
        virtual int Run( S32 argc, char** argv ) = 0;

    protected:

        virtual bool StartDependencies() { return true; }
        virtual bool Initialize();
        virtual bool Shutdown();

        //-------------------------------------------------------------------------

        // This function will process all commandline settings and load all ini settings. Needs to be the very first thing called from the derived application's run method.
        bool ReadSettings( S32 argc, char** argv );

        // This function will save ini settings. Needs to be the very last thing called from the derived application's run method.
        void WriteSettings();

        //-------------------------------------------------------------------------

        bool InitializeModules();
        void ShutdownModules();

        //-------------------------------------------------------------------------

        void LoadStartupMap();
        bool Update();
        void ResizeMainWindow( Int2 windowDimensions );
        void RequestExit();

        virtual bool FatalError( KRG::String const& error ) = 0;

    protected:

        ApplicationGlobalState                          m_applicationGlobalState;
        SettingsRegistry                                m_settingsRegistry;

        // Modules
        //-------------------------------------------------------------------------

        Engine::EngineModule                            m_module_engine_core;
        Physics::EngineModule                           m_module_engine_physics;
        Render::EngineModule                            m_module_engine_render;
        Animation::EngineModule                         m_module_engine_animation;
        Navmesh::EngineModule                           m_module_engine_navmesh;
        Game::GameModule                                m_module_game_core;

        // Contexts
        //-------------------------------------------------------------------------

        ModuleContext                                   m_moduleContext;
        EngineUpdateContext                             m_updateContext;

        // Core Engine Systems
        //-------------------------------------------------------------------------

        SystemRegistry*                                 m_pSystemRegistry = nullptr;
        TaskSystem*                                     m_pTaskSystem = nullptr;
        TypeSystem::TypeRegistry*                       m_pTypeRegistry = nullptr;
        Resource::ResourceSystem*                       m_pResourceSystem = nullptr;
        Render::RenderDevice*                           m_pRenderDevice = nullptr;
        Render::RendererRegistry*                       m_pRendererRegistry = nullptr;
        Render::RenderingSystem                         m_renderingSystem;
        EntityWorld*                                    m_pEntityWorld = nullptr;
        ImGuiX::ImguiSystem*                            m_pImguiSystem = nullptr;
        Input::InputSystem*                             m_pInputSystem = nullptr;
        Navmesh::NavmeshSystem*                         m_pNavmeshSystem = nullptr;
        Physics::PhysicsSystem*                         m_pPhysicsSystem = nullptr;
        CameraWorldSystem*                              m_pCameraSystem = nullptr;

        #if KRG_DEVELOPMENT_TOOLS
        Debug::DebugUISystem*                           m_pDebugUISystem = nullptr;
        Debug::DrawingSystem*                           m_pDebugDrawingSystem = nullptr;
        #endif

        // Application data
        //-------------------------------------------------------------------------

        DataPath                                        m_startupMap;
        bool                                            m_isEditorModeEnabled = false;
        bool                                            m_initialized = false;
        bool                                            m_exitRequested = false;
        bool                                            m_hasFocus = false;
    };
}