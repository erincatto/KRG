//-------------------------------------------------------------------------
// This is an auto-generated file - DO NOT edit
//-------------------------------------------------------------------------

#include "System/TypeSystem/TypeHelpers.h"
#include "System/TypeSystem/TypeRegistry.h"

#include "D:\Kruger\Code\Tools\Render\_Module\Module.h"
#include "D:\Kruger\Code\Engine\Core\_Module\Module.h"
#include "D:\Kruger\Code\Engine\Render\_Module\Module.h"
#include "D:\Kruger\Code\Engine\Animation\_Module\Module.h"
#include "D:\Kruger\Code\Engine\Navmesh\_Module\Module.h"
#include "D:\Kruger\Code\Engine\Physics\_Module\Module.h"
#include "D:\Kruger\Code\Game\Core\_Module\Module.h"
#include "D:\Kruger\Code\Tools\Core\_Module\Module.h"
#include "D:\Kruger\Code\Tools\Animation\_Module\Module.h"
#include "D:\Kruger\Code\Tools\Physics\_Module\Module.h"
#include "D:\Kruger\Code\Tools\Entity\_Module\Module.h"

namespace KRG
{
    namespace AutoGenerated::Tools
    {
        inline void RegisterTypes( TypeSystem::TypeRegistry& typeRegistry )
        {
            KRG::EngineCore::EngineModule::RegisterTypes( typeRegistry );
            KRG::Render::EngineModule::RegisterTypes( typeRegistry );
            KRG::Animation::EngineModule::RegisterTypes( typeRegistry );
            KRG::Navmesh::EngineModule::RegisterTypes( typeRegistry );
            KRG::Physics::EngineModule::RegisterTypes( typeRegistry );
            KRG::Game::GameModule::RegisterTypes( typeRegistry );
            KRG::ToolsModule::RegisterTypes( typeRegistry );
            KRG::Animation::ToolsModule::RegisterTypes( typeRegistry );
            KRG::Physics::ToolsModule::RegisterTypes( typeRegistry );
            KRG::EntityModel::ToolsModule::RegisterTypes( typeRegistry );
            KRG::Render::ToolsModule::RegisterTypes( typeRegistry );

            TypeSystem::ResourceInfo resourceInfo;

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Render::Shader");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "SHDR" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Render Shader";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Render::PixelShader");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "PSDR" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Pixel Shader";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Render::GeometryShader");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "GSDR" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Geometry Shader";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Render::VertexShader");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "VSDR" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Vertex Shader";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Render::Texture");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "TXTR" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Render Texture";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::EntityModel::EntityMapDescriptor");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "MAP" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Map";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Render::Material");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "MTRL" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Render Material";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Render::StaticMesh");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "MSH" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Static Mesh";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Render::SkeletalMesh");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "SMSH" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Skeletal Mesh";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Animation::Skeleton");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "SKEL" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Animation Skeleton";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Animation::AnimationClip");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "ANIM" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Animation Clip";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Animation::AnimationGraphDataSet");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "AGDS" );
            resourceInfo.m_isVirtualResource = true;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Animation Graph DataSet";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Animation::AnimationGraphDefinition");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "AG" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Animation Graph";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Animation::AnimationGraphVariation");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "AGV" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Animation Graph Variation";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Navmesh::NavmeshData");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "NAV" );
            resourceInfo.m_isVirtualResource = true;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Navmesh";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Physics::PhysicsMesh");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "PMSH" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Physics Mesh";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );

            resourceInfo.m_typeID = TypeSystem::TypeID( "KRG::Physics::PhysicsMaterialDatabase");
            resourceInfo.m_resourceTypeID = ResourceTypeID( "PMDB" );
            resourceInfo.m_isVirtualResource = false;
            #if KRG_DEVELOPMENT_TOOLS
            resourceInfo.m_friendlyName = "Physics Material DB";
            #endif
            typeRegistry.RegisterResourceTypeID( resourceInfo );
        }

        inline void UnregisterTypes( TypeSystem::TypeRegistry& typeRegistry )
        {
            KRG::Render::ToolsModule::UnregisterTypes( typeRegistry );
            KRG::EntityModel::ToolsModule::UnregisterTypes( typeRegistry );
            KRG::Physics::ToolsModule::UnregisterTypes( typeRegistry );
            KRG::Animation::ToolsModule::UnregisterTypes( typeRegistry );
            KRG::ToolsModule::UnregisterTypes( typeRegistry );
            KRG::Game::GameModule::UnregisterTypes( typeRegistry );
            KRG::Physics::EngineModule::UnregisterTypes( typeRegistry );
            KRG::Navmesh::EngineModule::UnregisterTypes( typeRegistry );
            KRG::Animation::EngineModule::UnregisterTypes( typeRegistry );
            KRG::Render::EngineModule::UnregisterTypes( typeRegistry );
            KRG::EngineCore::EngineModule::UnregisterTypes( typeRegistry );

            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Physics::PhysicsMaterialDatabase" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Physics::PhysicsMesh" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Navmesh::NavmeshData" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Animation::AnimationGraphVariation" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Animation::AnimationGraphDefinition" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Animation::AnimationGraphDataSet" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Animation::AnimationClip" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Animation::Skeleton" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Render::SkeletalMesh" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Render::StaticMesh" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Render::Material" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::EntityModel::EntityMapDescriptor" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Render::Texture" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Render::VertexShader" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Render::GeometryShader" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Render::PixelShader" ) );
            typeRegistry.UnregisterResourceTypeID( TypeSystem::TypeID( "KRG::Render::Shader" ) );
        }
    }
}
