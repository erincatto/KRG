#include "System/TypeSystem/TypeRegistry.h"
#include "Applications/Shared/ApplicationGlobalState.h"
#include "_AutoGenerated/ToolsTypeRegistration.h"
#include "Engine/Physics/PhysicsLayers.h"
#include "System/Core/FileSystem/FileSystem.h"
#include "System/Core/Serialization/JsonArchive.h"
#include "System/Core/Math/NumericRange.h"

//-------------------------------------------------------------------------

using namespace KRG;
using namespace KRG::Physics;

//-------------------------------------------------------------------------

static StringID ID( "S" );

int main( int argc, char *argv[] )
{
    {
        KRG::ApplicationGlobalState State;
        TypeSystem::TypeRegistry typeRegistry;
        AutoGenerated::Tools::RegisterTypes( typeRegistry );

        //-------------------------------------------------------------------------

        StringID s;
        StringID sv( "Boo" );
        Tag a( "cow", "brown", "fat" );
        Tag b( "cow" );
        Tag c( "gun", "large", "blah" );
        Tag t = Tag::FromTagFormatString( "a.b.sdad_dsada.c.das.das.das" );

        Tag d = c.GetParentTag();
        Tag e = d.GetParentTag();
        Tag f = e.GetParentTag();

        String cow = a.ToString();

        bool const l = a.IsChildOf( b );
        bool const p = b.IsParentOf( a );

        bool const k = a == b;
        bool const r = a != b;

        //-------------------------------------------------------------------------

        TInlineVector<Tag, 10> someTags = { a, a, b, c };
        TVector<Tag> moreTags = { c, c, b, c };
        TArray<Tag, 5> arrayTags = { a, b, c, t, a };

        bool r0 = Tag::HasExactlyMatchingTag( someTags, a );
        bool r1 = Tag::HasExactlyMatchingTag( moreTags, a );
        bool r2 = Tag::HasExactlyMatchingTag( arrayTags, a );

        Tag::QueryResults results;

        if ( Tag::FindAllChildTags( someTags, b, results ) )
        {
            std::cout << "ds";
        }

        //-------------------------------------------------------------------------

        AutoGenerated::Tools::UnregisterTypes( typeRegistry );
    }

    return 0;
}