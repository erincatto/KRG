//-------------------------------------------------------------------------
// This is an auto-generated file - DO NOT edit
//-------------------------------------------------------------------------

#include "D:\Kruger\Code\Game\Core\_Module\_AutoGenerated\2131064025.h"

//-------------------------------------------------------------------------
// TypeHelper: KRG::CustomizerTestComponent
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::CustomizerTestComponent::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            void const* TTypeHelper<KRG::CustomizerTestComponent>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::CustomizerTestComponent> TTypeHelper<KRG::CustomizerTestComponent>::StaticTypeHelper;
        }
    }

    TypeSystem::TypeInfo const* KRG::CustomizerTestComponent::GetTypeInfo() const
    {
        return KRG::CustomizerTestComponent::s_pTypeInfo;
    }

    void KRG::CustomizerTestComponent::Load( EntityModel::LoadingContext const& context, UUID requesterID )
    {
        KRG::CustomizerTestComponent::s_pTypeInfo->m_pTypeHelper->LoadResources( context.m_pResourceSystem, requesterID, this );
        m_status = Status::Loading;
    }

    void KRG::CustomizerTestComponent::Unload( EntityModel::LoadingContext const& context, UUID requesterID )
    {
        KRG::CustomizerTestComponent::s_pTypeInfo->m_pTypeHelper->UnloadResources( context.m_pResourceSystem, requesterID, this );
        m_status = Status::Unloaded;
    }

    void KRG::CustomizerTestComponent::UpdateLoading()
    {
        if( m_status == Status::Loading )
        {
            auto const resourceLoadingStatus = KRG::CustomizerTestComponent::s_pTypeInfo->m_pTypeHelper->GetResourceLoadingStatus( this );
            if ( resourceLoadingStatus == LoadingStatus::Loading )
            {
                return; // Something is still loading so early-out
            }

            if ( resourceLoadingStatus == LoadingStatus::Failed )
            {
                m_status = EntityComponent::Status::LoadingFailed;
            }
            else
            {
                m_status = EntityComponent::Status::Loaded;
            }
        }
    }
}
