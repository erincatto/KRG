//-------------------------------------------------------------------------
// This is an auto-generated file - DO NOT edit
//-------------------------------------------------------------------------

#include "d:\Kruger\Code\Game\Core\_Module\_AutoGenerated\1415443842.h"

//-------------------------------------------------------------------------
// TypeHelper: KRG::ExternalTestSubSubStruct
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::ExternalTestSubSubStruct::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            IRegisteredType const* TTypeHelper<KRG::ExternalTestSubSubStruct>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::ExternalTestSubSubStruct> TTypeHelper<KRG::ExternalTestSubSubStruct>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::ExternalTestSubStruct
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::ExternalTestSubStruct::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            IRegisteredType const* TTypeHelper<KRG::ExternalTestSubStruct>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::ExternalTestSubStruct> TTypeHelper<KRG::ExternalTestSubStruct>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::ExternalTestStruct
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::ExternalTestStruct::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            IRegisteredType const* TTypeHelper<KRG::ExternalTestStruct>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::ExternalTestStruct> TTypeHelper<KRG::ExternalTestStruct>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// Enum Helper: KRG::TestFlags
//-------------------------------------------------------------------------

namespace KRG
{
    namespace TypeSystem
    {
        namespace EnumHelpers
        {
            void EnumHelper_KRG_TestFlags::RegisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                TypeSystem::TypeInfo typeInfo;
                typeInfo.m_ID = TypeSystem::TypeID( "KRG::TestFlags" );
                typeInfo.m_size = sizeof( KRG::TestFlags );
                typeInfo.m_alignment = alignof( KRG::TestFlags );
                typeRegistry.RegisterType( typeInfo );

                TypeSystem::EnumInfo enumInfo;
                enumInfo.m_ID = TypeSystem::TypeID( "KRG::TestFlags" );
                enumInfo.m_underlyingType = TypeSystem::CoreTypes::Int32;
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "c" ), 3 ) );
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "Duplicate" ), 5 ) );
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "a" ), 1 ) );
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "B" ), 2 ) );
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "D" ), 4 ) );
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "A" ), 5 ) );

                typeRegistry.RegisterEnum( enumInfo );
            }

            void EnumHelper_KRG_TestFlags::UnregisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                auto const ID = TypeSystem::TypeID( "KRG::TestFlags" );
                typeRegistry.UnregisterType( ID );
                typeRegistry.UnregisterEnum( ID );
            }
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::TestComponent::InternalStruct
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::TestComponent::InternalStruct::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            IRegisteredType const* TTypeHelper<KRG::TestComponent::InternalStruct>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::TestComponent::InternalStruct> TTypeHelper<KRG::TestComponent::InternalStruct>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// Enum Helper: KRG::TestComponent::InternalEnum
//-------------------------------------------------------------------------

namespace KRG
{
    namespace TypeSystem
    {
        namespace EnumHelpers
        {
            void EnumHelper_KRG_TestComponent_InternalEnum::RegisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                TypeSystem::TypeInfo typeInfo;
                typeInfo.m_ID = TypeSystem::TypeID( "KRG::TestComponent::InternalEnum" );
                typeInfo.m_size = sizeof( KRG::TestComponent::InternalEnum );
                typeInfo.m_alignment = alignof( KRG::TestComponent::InternalEnum );
                typeRegistry.RegisterType( typeInfo );

                TypeSystem::EnumInfo enumInfo;
                enumInfo.m_ID = TypeSystem::TypeID( "KRG::TestComponent::InternalEnum" );
                enumInfo.m_underlyingType = TypeSystem::CoreTypes::Uint8;
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "Bar" ), 75 ) );
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "foo" ), 54 ) );

                typeRegistry.RegisterEnum( enumInfo );
            }

            void EnumHelper_KRG_TestComponent_InternalEnum::UnregisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                auto const ID = TypeSystem::TypeID( "KRG::TestComponent::InternalEnum" );
                typeRegistry.UnregisterType( ID );
                typeRegistry.UnregisterEnum( ID );
            }
        }
    }
}

//-------------------------------------------------------------------------
// Enum Helper: KRG::TestComponent::InternalTest::InternalEnum
//-------------------------------------------------------------------------

namespace KRG
{
    namespace TypeSystem
    {
        namespace EnumHelpers
        {
            void EnumHelper_KRG_TestComponent_InternalTest_InternalEnum::RegisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                TypeSystem::TypeInfo typeInfo;
                typeInfo.m_ID = TypeSystem::TypeID( "KRG::TestComponent::InternalTest::InternalEnum" );
                typeInfo.m_size = sizeof( KRG::TestComponent::InternalTest::InternalEnum );
                typeInfo.m_alignment = alignof( KRG::TestComponent::InternalTest::InternalEnum );
                typeRegistry.RegisterType( typeInfo );

                TypeSystem::EnumInfo enumInfo;
                enumInfo.m_ID = TypeSystem::TypeID( "KRG::TestComponent::InternalTest::InternalEnum" );
                enumInfo.m_underlyingType = TypeSystem::CoreTypes::Int16;
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "Bar" ), 0 ) );
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "foo" ), -1 ) );

                typeRegistry.RegisterEnum( enumInfo );
            }

            void EnumHelper_KRG_TestComponent_InternalTest_InternalEnum::UnregisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                auto const ID = TypeSystem::TypeID( "KRG::TestComponent::InternalTest::InternalEnum" );
                typeRegistry.UnregisterType( ID );
                typeRegistry.UnregisterEnum( ID );
            }
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::TestComponent
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::TestComponent::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            IRegisteredType const* TTypeHelper<KRG::TestComponent>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::TestComponent> TTypeHelper<KRG::TestComponent>::StaticTypeHelper;
        }
    }

    void KRG::TestComponent::Load( EntityModel::LoadingContext const& context, UUID requesterID )
    {
        KRG::TestComponent::s_pTypeInfo->m_pTypeHelper->LoadResources( context.m_pResourceSystem, requesterID, this );
        m_status = Status::Loading;
    }

    void KRG::TestComponent::Unload( EntityModel::LoadingContext const& context, UUID requesterID )
    {
        KRG::TestComponent::s_pTypeInfo->m_pTypeHelper->UnloadResources( context.m_pResourceSystem, requesterID, this );
        m_status = Status::Unloaded;
    }

    void KRG::TestComponent::UpdateLoading()
    {
        if( m_status == Status::Loading )
        {
            auto const resourceLoadingStatus = KRG::TestComponent::s_pTypeInfo->m_pTypeHelper->GetResourceLoadingStatus( this );
            if ( resourceLoadingStatus == LoadingStatus::Loading )
            {
                return; // Something is still loading so early-out
            }

            if ( resourceLoadingStatus == LoadingStatus::Failed )
            {
                m_status = EntityComponent::Status::LoadingFailed;
            }
            else
            {
                m_status = EntityComponent::Status::Loaded;
            }
        }
    }
}
