//-------------------------------------------------------------------------
// This is an auto-generated file - DO NOT edit
//-------------------------------------------------------------------------

#include "D:\Kruger\Code\Game\Core\_Module\_AutoGenerated\1415443842.h"

//-------------------------------------------------------------------------
// TypeHelper: KRG::AnotherTestStruct
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::AnotherTestStruct::TypeInfoPtr = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            void const* TTypeHelper<KRG::AnotherTestStruct>::DefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::AnotherTestStruct> TTypeHelper<KRG::AnotherTestStruct>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::TestStruct
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::TestStruct::TypeInfoPtr = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            void const* TTypeHelper<KRG::TestStruct>::DefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::TestStruct> TTypeHelper<KRG::TestStruct>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::TestComponent::InternalStruct
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::TestComponent::InternalStruct::TypeInfoPtr = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            void const* TTypeHelper<KRG::TestComponent::InternalStruct>::DefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::TestComponent::InternalStruct> TTypeHelper<KRG::TestComponent::InternalStruct>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// Enum Helper: KRG::TestComponent::InternalEnum
//-------------------------------------------------------------------------

namespace KRG
{
    namespace TypeSystem
    {
        namespace EnumHelpers
        {
            void EnumHelper_KRG_TestComponent_InternalEnum::RegisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                TypeSystem::TypeInfo typeInfo;
                typeInfo.m_ID = TypeSystem::TypeID( "KRG::TestComponent::InternalEnum" );
                typeInfo.m_size = sizeof( KRG::TestComponent::InternalEnum );
                typeInfo.m_alignment = alignof( KRG::TestComponent::InternalEnum );
                typeRegistry.RegisterType( typeInfo );

                TypeSystem::EnumInfo enumInfo;
                enumInfo.m_ID = TypeSystem::TypeID( "KRG::TestComponent::InternalEnum" );
                enumInfo.m_underlyingType = TypeSystem::CoreTypes::U8;
                enumInfo.m_constants.insert( TPair<StringID, S64>( StringID( "Bar" ), 75 ) );
                enumInfo.m_constants.insert( TPair<StringID, S64>( StringID( "foo" ), 54 ) );

                typeRegistry.RegisterEnum( enumInfo );
            }

            void EnumHelper_KRG_TestComponent_InternalEnum::UnregisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                auto const ID = TypeSystem::TypeID( "KRG::TestComponent::InternalEnum" );
                typeRegistry.UnregisterType( ID );
                typeRegistry.UnregisterEnum( ID );
            }
        }
    }
}

//-------------------------------------------------------------------------
// Enum Helper: KRG::TestComponent::Test::InternalEnum
//-------------------------------------------------------------------------

namespace KRG
{
    namespace TypeSystem
    {
        namespace EnumHelpers
        {
            void EnumHelper_KRG_TestComponent_Test_InternalEnum::RegisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                TypeSystem::TypeInfo typeInfo;
                typeInfo.m_ID = TypeSystem::TypeID( "KRG::TestComponent::Test::InternalEnum" );
                typeInfo.m_size = sizeof( KRG::TestComponent::Test::InternalEnum );
                typeInfo.m_alignment = alignof( KRG::TestComponent::Test::InternalEnum );
                typeRegistry.RegisterType( typeInfo );

                TypeSystem::EnumInfo enumInfo;
                enumInfo.m_ID = TypeSystem::TypeID( "KRG::TestComponent::Test::InternalEnum" );
                enumInfo.m_underlyingType = TypeSystem::CoreTypes::S16;
                enumInfo.m_constants.insert( TPair<StringID, S64>( StringID( "Bar" ), 0 ) );
                enumInfo.m_constants.insert( TPair<StringID, S64>( StringID( "foo" ), -1 ) );

                typeRegistry.RegisterEnum( enumInfo );
            }

            void EnumHelper_KRG_TestComponent_Test_InternalEnum::UnregisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                auto const ID = TypeSystem::TypeID( "KRG::TestComponent::Test::InternalEnum" );
                typeRegistry.UnregisterType( ID );
                typeRegistry.UnregisterEnum( ID );
            }
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::TestComponent
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::TestComponent::TypeInfoPtr = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            void const* TTypeHelper<KRG::TestComponent>::DefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::TestComponent> TTypeHelper<KRG::TestComponent>::StaticTypeHelper;
        }
    }

    TypeSystem::TypeInfo const* KRG::TestComponent::GetTypeInfo() const
    {
        return KRG::TestComponent::TypeInfoPtr;
    }

    void KRG::TestComponent::Load( EntityLoadingContext const& context, UUID requesterID )
    {
        KRG::TestComponent::TypeInfoPtr->m_pTypeHelper->LoadResources( context.m_pResourceSystem, requesterID, this );
        m_status = Status::Loading;
    }

    void KRG::TestComponent::Unload( EntityLoadingContext const& context, UUID requesterID )
    {
        KRG::TestComponent::TypeInfoPtr->m_pTypeHelper->UnloadResources( context.m_pResourceSystem, requesterID, this );
        m_status = Status::Unloaded;
    }

    void KRG::TestComponent::UpdateLoading()
    {
        if( m_status == Status::Loading )
        {
            auto const resourceLoadingStatus = KRG::TestComponent::TypeInfoPtr->m_pTypeHelper->GetResourceLoadingStatus( this );
            if ( resourceLoadingStatus == LoadingStatus::Loading )
            {
                return; // Something is still loading so early-out
            }

            if ( resourceLoadingStatus == LoadingStatus::Failed )
            {
                m_status = EntityComponent::Status::LoadingFailed;
            }
            else
            {
                m_status = EntityComponent::Status::Loaded;
            }
        }
    }
}
