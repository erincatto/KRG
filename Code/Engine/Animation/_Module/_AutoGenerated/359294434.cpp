//-------------------------------------------------------------------------
// This is an auto-generated file - DO NOT edit
//-------------------------------------------------------------------------

#include "D:\Kruger\Code\Engine\Animation\_Module\_AutoGenerated\359294434.h"

//-------------------------------------------------------------------------
// Enum Helper: KRG::Animation::Graph::EventSearchMode
//-------------------------------------------------------------------------

namespace KRG
{
    namespace TypeSystem
    {
        namespace EnumHelpers
        {
            void EnumHelper_KRG_Animation_Graph_EventSearchMode::RegisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                TypeSystem::TypeInfo typeInfo;
                typeInfo.m_ID = TypeSystem::TypeID( "KRG::Animation::Graph::EventSearchMode" );
                typeInfo.m_size = sizeof( KRG::Animation::Graph::EventSearchMode );
                typeInfo.m_alignment = alignof( KRG::Animation::Graph::EventSearchMode );
                typeRegistry.RegisterType( typeInfo );

                TypeSystem::EnumInfo enumInfo;
                enumInfo.m_ID = TypeSystem::TypeID( "KRG::Animation::Graph::EventSearchMode" );
                enumInfo.m_underlyingType = TypeSystem::CoreTypes::Uint8;
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "OnlySearchAnimEvents" ), 2 ) );
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "SearchAll" ), 0 ) );
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "OnlySearchStateEvents" ), 1 ) );

                typeRegistry.RegisterEnum( enumInfo );
            }

            void EnumHelper_KRG_Animation_Graph_EventSearchMode::UnregisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                auto const ID = TypeSystem::TypeID( "KRG::Animation::Graph::EventSearchMode" );
                typeRegistry.UnregisterType( ID );
                typeRegistry.UnregisterEnum( ID );
            }
        }
    }
}

//-------------------------------------------------------------------------
// Enum Helper: KRG::Animation::Graph::GenericEventConditionNode::Operator
//-------------------------------------------------------------------------

namespace KRG
{
    namespace TypeSystem
    {
        namespace EnumHelpers
        {
            void EnumHelper_KRG_Animation_Graph_GenericEventConditionNode_Operator::RegisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                TypeSystem::TypeInfo typeInfo;
                typeInfo.m_ID = TypeSystem::TypeID( "KRG::Animation::Graph::GenericEventConditionNode::Operator" );
                typeInfo.m_size = sizeof( KRG::Animation::Graph::GenericEventConditionNode::Operator );
                typeInfo.m_alignment = alignof( KRG::Animation::Graph::GenericEventConditionNode::Operator );
                typeRegistry.RegisterType( typeInfo );

                TypeSystem::EnumInfo enumInfo;
                enumInfo.m_ID = TypeSystem::TypeID( "KRG::Animation::Graph::GenericEventConditionNode::Operator" );
                enumInfo.m_underlyingType = TypeSystem::CoreTypes::Uint8;
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "And" ), 1 ) );
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "Or" ), 0 ) );

                typeRegistry.RegisterEnum( enumInfo );
            }

            void EnumHelper_KRG_Animation_Graph_GenericEventConditionNode_Operator::UnregisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                auto const ID = TypeSystem::TypeID( "KRG::Animation::Graph::GenericEventConditionNode::Operator" );
                typeRegistry.UnregisterType( ID );
                typeRegistry.UnregisterEnum( ID );
            }
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::Animation::Graph::GenericEventConditionNode::Settings
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::Animation::Graph::GenericEventConditionNode::Settings::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            IRegisteredType const* TTypeHelper<KRG::Animation::Graph::GenericEventConditionNode::Settings>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::Animation::Graph::GenericEventConditionNode::Settings> TTypeHelper<KRG::Animation::Graph::GenericEventConditionNode::Settings>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::Animation::Graph::GenericEventPercentageThroughNode::Settings
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::Animation::Graph::GenericEventPercentageThroughNode::Settings::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            IRegisteredType const* TTypeHelper<KRG::Animation::Graph::GenericEventPercentageThroughNode::Settings>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::Animation::Graph::GenericEventPercentageThroughNode::Settings> TTypeHelper<KRG::Animation::Graph::GenericEventPercentageThroughNode::Settings>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::Animation::Graph::FootEventConditionNode::Settings
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::Animation::Graph::FootEventConditionNode::Settings::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            IRegisteredType const* TTypeHelper<KRG::Animation::Graph::FootEventConditionNode::Settings>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::Animation::Graph::FootEventConditionNode::Settings> TTypeHelper<KRG::Animation::Graph::FootEventConditionNode::Settings>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::Animation::Graph::FootstepEventPercentageThroughNode::Settings
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::Animation::Graph::FootstepEventPercentageThroughNode::Settings::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            IRegisteredType const* TTypeHelper<KRG::Animation::Graph::FootstepEventPercentageThroughNode::Settings>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::Animation::Graph::FootstepEventPercentageThroughNode::Settings> TTypeHelper<KRG::Animation::Graph::FootstepEventPercentageThroughNode::Settings>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// Enum Helper: KRG::Animation::Graph::SyncEventConditionNode::TriggerMode
//-------------------------------------------------------------------------

namespace KRG
{
    namespace TypeSystem
    {
        namespace EnumHelpers
        {
            void EnumHelper_KRG_Animation_Graph_SyncEventConditionNode_TriggerMode::RegisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                TypeSystem::TypeInfo typeInfo;
                typeInfo.m_ID = TypeSystem::TypeID( "KRG::Animation::Graph::SyncEventConditionNode::TriggerMode" );
                typeInfo.m_size = sizeof( KRG::Animation::Graph::SyncEventConditionNode::TriggerMode );
                typeInfo.m_alignment = alignof( KRG::Animation::Graph::SyncEventConditionNode::TriggerMode );
                typeRegistry.RegisterType( typeInfo );

                TypeSystem::EnumInfo enumInfo;
                enumInfo.m_ID = TypeSystem::TypeID( "KRG::Animation::Graph::SyncEventConditionNode::TriggerMode" );
                enumInfo.m_underlyingType = TypeSystem::CoreTypes::Uint8;
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "ExactlyAtEventIndex" ), 0 ) );
                enumInfo.m_constants.insert( TPair<StringID, int64>( StringID( "GreaterThanEqualToEventIndex" ), 1 ) );

                typeRegistry.RegisterEnum( enumInfo );
            }

            void EnumHelper_KRG_Animation_Graph_SyncEventConditionNode_TriggerMode::UnregisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                auto const ID = TypeSystem::TypeID( "KRG::Animation::Graph::SyncEventConditionNode::TriggerMode" );
                typeRegistry.UnregisterType( ID );
                typeRegistry.UnregisterEnum( ID );
            }
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::Animation::Graph::SyncEventConditionNode::Settings
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::Animation::Graph::SyncEventConditionNode::Settings::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            IRegisteredType const* TTypeHelper<KRG::Animation::Graph::SyncEventConditionNode::Settings>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::Animation::Graph::SyncEventConditionNode::Settings> TTypeHelper<KRG::Animation::Graph::SyncEventConditionNode::Settings>::StaticTypeHelper;
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::Animation::Graph::CurrentSyncEventNode::Settings
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::Animation::Graph::CurrentSyncEventNode::Settings::s_pTypeInfo = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            IRegisteredType const* TTypeHelper<KRG::Animation::Graph::CurrentSyncEventNode::Settings>::s_pDefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::Animation::Graph::CurrentSyncEventNode::Settings> TTypeHelper<KRG::Animation::Graph::CurrentSyncEventNode::Settings>::StaticTypeHelper;
        }
    }
}
