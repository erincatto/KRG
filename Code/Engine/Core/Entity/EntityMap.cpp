#include "EntityMap.h"
#include "Engine/Core/Entity/Entity.h"
#include "System/Resource/ResourceSystem.h"
#include "System/Core/Profiling/Profiling.h"
#include "Engine/Core/Entity/EntityLoadingContext.h"

//-------------------------------------------------------------------------

namespace KRG::EntityModel
{
    EntityMap::EntityMap()
        : EntityCollection()
        , m_entityUpdateEventBindingID( Entity::OnEntityStateUpdated().Bind( [this] ( Entity* pEntity ) { OnEntityStateUpdated( pEntity ); } ) )
        , m_isTransientMap( true )
    {
        m_ID.Reset(); // Clear autogenerated ID
    }

    EntityMap::EntityMap( ResourceID mapResourceID )
        : EntityCollection()
        , m_pMapDesc( mapResourceID )
        , m_entityUpdateEventBindingID( Entity::OnEntityStateUpdated().Bind( [this] ( Entity* pEntity ) { OnEntityStateUpdated( pEntity ); } ) )
    {
        m_ID.Reset(); // Clear autogenerated ID
    }

    EntityMap::EntityMap( EntityMap const& map )
        : m_entityUpdateEventBindingID( Entity::OnEntityStateUpdated().Bind( [this] ( Entity* pEntity ) { OnEntityStateUpdated( pEntity ); } ) )
    {
        operator=( map );
    }

    EntityMap::EntityMap( EntityMap&& map )
        : m_entityUpdateEventBindingID( Entity::OnEntityStateUpdated().Bind( [this] ( Entity* pEntity ) { OnEntityStateUpdated( pEntity ); } ) )
    {
        operator=( eastl::move( map ) );
    }

    EntityMap::~EntityMap()
    {
        KRG_ASSERT( IsUnloaded() && !m_isCollectionInstantiated );
        KRG_ASSERT( m_entities.empty() && m_entityLookupMap.empty() );
        KRG_ASSERT( m_entitiesToHotReload.empty() );

        #if KRG_DEVELOPMENT_TOOLS
        KRG_ASSERT( m_editedEntities.empty() );
        #endif

        Entity::OnEntityStateUpdated().Unbind( m_entityUpdateEventBindingID );
    }

    //-------------------------------------------------------------------------

    EntityMap& EntityMap::operator=( EntityMap const& map )
    {
        // Only allow copy constructor for unloaded maps
        KRG_ASSERT( m_status == Status::Unloaded && map.m_status == Status::Unloaded );
        KRG_ASSERT( map.m_entitiesToHotReload.empty() );

        m_pMapDesc = map.m_pMapDesc;
        const_cast<bool&>( m_isTransientMap ) = map.m_isTransientMap;
        return *this;
    }

    EntityMap& EntityMap::operator=( EntityMap&& map )
    {
        KRG_ASSERT( map.m_entitiesToHotReload.empty() );

        m_ID = map.m_ID;
        m_entities.swap( map.m_entities );
        m_entityLookupMap.swap( map.m_entityLookupMap );
        m_pMapDesc = eastl::move( map.m_pMapDesc );
        m_entitiesCurrentlyLoading = eastl::move( map.m_entitiesCurrentlyLoading );
        m_status = map.m_status;
        m_isUnloadRequested = map.m_isUnloadRequested;
        m_isCollectionInstantiated = map.m_isCollectionInstantiated;
        const_cast<bool&>( m_isTransientMap ) = map.m_isTransientMap;

        // Clear source map
        map.m_ID.Reset();
        map.m_status = Status::Unloaded;
        map.m_isCollectionInstantiated = false;
        map.m_isUnloadRequested = false;
        return *this;
    }

    //-------------------------------------------------------------------------

    void EntityMap::AddEntity( Entity* pEntity )
    {
        // Ensure that the entity to add, is not already part of a collection and that it's deactivated
        KRG_ASSERT( pEntity != nullptr && !pEntity->IsInCollection() && !pEntity->HasRequestedComponentLoad() );
        KRG_ASSERT( !VectorContains( m_entitiesToAdd, pEntity ) );

        // Lock the map
        Threading::RecursiveScopeLock lock( m_mutex );
        m_entitiesToAdd.emplace_back( pEntity );
    }

    Entity* EntityMap::RemoveEntity( UUID entityID )
    {
        Entity* pEntityToRemove = nullptr;

        // Lock the map
        Threading::RecursiveScopeLock lock( m_mutex );

        // Check if the entity is in the add queue, if so just cancel the request
        int32 const entityIdx = VectorFindIndex( m_entitiesToAdd, entityID, [] ( Entity* pEntity, UUID entityID ) { return pEntity->GetID() == entityID; } );
        if ( entityIdx != InvalidIndex )
        {
            pEntityToRemove = m_entitiesToAdd[entityIdx];
            m_entitiesToAdd.erase_unsorted( m_entitiesToAdd.begin() + entityIdx );
        }
        else // Queue removal
        {
            if ( m_isCollectionInstantiated )
            {
                pEntityToRemove = FindEntity( entityID );
                KRG_ASSERT( pEntityToRemove != nullptr );
                m_entitiesToRemove.emplace_back( RemovalRequest( pEntityToRemove, false ) );
            }
            else // Unknown entity
            {
                KRG_UNREACHABLE_CODE();
            }
        }

        return pEntityToRemove;
    }

    void EntityMap::DestroyEntity( UUID entityID )
    {
        Entity* pEntityToDestroy = nullptr;

        // Lock the map
        Threading::RecursiveScopeLock lock( m_mutex );

        // Check if the entity is in the add queue, if so just cancel the request
        int32 const entityIdx = VectorFindIndex( m_entitiesToAdd, entityID, [] ( Entity* pEntity, UUID entityID ) { return pEntity->GetID() == entityID; } );
        if ( entityIdx != InvalidIndex )
        {
            pEntityToDestroy = m_entitiesToAdd[entityIdx];
            m_entitiesToAdd.erase_unsorted( m_entitiesToAdd.begin() + entityIdx );
            KRG::Delete( pEntityToDestroy );
        }
        else
        {
            // Queue removal
            if ( m_isCollectionInstantiated )
            {
                pEntityToDestroy = FindEntity( entityID );
                KRG_ASSERT( pEntityToDestroy != nullptr );
                m_entitiesToRemove.emplace_back( RemovalRequest( pEntityToDestroy, true ) );
            }
            else// Unknown entity
            {
                KRG_UNREACHABLE_CODE();
            }
        }
    }

    //-------------------------------------------------------------------------

    void EntityMap::Load( EntityLoadingContext const& loadingContext )
    {
        KRG_ASSERT( Threading::IsMainThread() && loadingContext.IsValid() );
        KRG_ASSERT( m_status == Status::Unloaded );

        Threading::RecursiveScopeLock lock( m_mutex );

        if ( m_isTransientMap )
        {
            m_ID = UUID::GenerateID();
            m_status = Status::Loaded;
            m_isCollectionInstantiated = true;
        }
        else // Request loading of map resource
        {
            loadingContext.m_pResourceSystem->LoadResource( m_pMapDesc );
            m_status = Status::MapLoading;
        }
    }

    void EntityMap::Unload( EntityLoadingContext const& loadingContext )
    {
        KRG_ASSERT( m_status != Status::Unloaded );
        Threading::RecursiveScopeLock lock( m_mutex );
        m_isUnloadRequested = true;
    }

    void EntityMap::Activate( EntityLoadingContext const& loadingContext, EntityModel::ActivationContext& activationContext )
    {
        KRG_PROFILE_SCOPE_SCENE( "Map Activation" );
        KRG_ASSERT( m_status == Status::Loaded );

        //-------------------------------------------------------------------------

        struct EntityActivationTask : public IAsyncTask
        {
            EntityActivationTask( EntityModel::ActivationContext& activationContext, TVector<Entity*>& entities )
                : m_activationContext( activationContext )
                , m_entities( entities )
            {
                m_SetSize = (uint32) m_entities.size();
            }

            virtual void ExecuteRange( TaskSetPartition range, uint32 threadnum ) override final
            {
                KRG_PROFILE_SCOPE_SCENE( "Activate Entities Task" );

                for ( uint64 i = range.start; i < range.end; ++i )
                {
                    auto pEntity = m_entities[i];
                    if ( pEntity->IsLoaded() )
                    {
                        // Only activate non-spatial and root spatial entities
                        if ( !pEntity->IsSpatialEntity() || !pEntity->HasSpatialParent() )
                        {
                            pEntity->Activate( m_activationContext );
                        }
                    }
                }
            }

        private:

            EntityModel::ActivationContext&         m_activationContext;
            TVector<Entity*>&                       m_entities;
        };

        //-------------------------------------------------------------------------

        Threading::RecursiveScopeLock lock( m_mutex );

        EntityActivationTask activationTask( activationContext, m_entities );
        loadingContext.m_pTaskSystem->ScheduleTask( &activationTask );
        loadingContext.m_pTaskSystem->WaitForTask( &activationTask );

        m_status = Status::Activated;
    }

    void EntityMap::Deactivate( EntityLoadingContext const& loadingContext, EntityModel::ActivationContext& activationContext )
    {
        KRG_PROFILE_SCOPE_SCENE( "Map Deactivation" );
        KRG_ASSERT( m_status == Status::Activated );

        //-------------------------------------------------------------------------

        struct EntityDeactivationTask : public IAsyncTask
        {
            EntityDeactivationTask( EntityModel::ActivationContext& activationContext, TVector<Entity*>& entities )
                : m_activationContext( activationContext )
                , m_entities( entities )
            {
                m_SetSize = (uint32) m_entities.size();
            }

            virtual void ExecuteRange( TaskSetPartition range, uint32 threadnum ) override final
            {
                KRG_PROFILE_SCOPE_SCENE( "Deactivate Entities Task" );

                for ( uint64 i = range.start; i < range.end; ++i )
                {
                    auto pEntity = m_entities[i];
                    if ( pEntity->IsActivated() )
                    {
                        if ( !pEntity->IsSpatialEntity() || !pEntity->HasSpatialParent() )
                        {
                            pEntity->Deactivate( m_activationContext );
                        }
                    }
                }
            }

        private:

            EntityModel::ActivationContext&         m_activationContext;
            TVector<Entity*>&                       m_entities;
        };

        //-------------------------------------------------------------------------

        Threading::RecursiveScopeLock lock( m_mutex );

        EntityDeactivationTask deactivationTask( activationContext, m_entities );
        loadingContext.m_pTaskSystem->ScheduleTask( &deactivationTask );
        loadingContext.m_pTaskSystem->WaitForTask( &deactivationTask );

        m_status = Status::Loaded;
    }

    //-------------------------------------------------------------------------

    void EntityMap::OnEntityStateUpdated( Entity* pEntity )
    {
        if ( pEntity->GetCollectionID() == m_ID )
        {
            KRG_ASSERT( FindEntity( pEntity->GetID() ) );
            Threading::RecursiveScopeLock lock( m_mutex );
            m_entitiesCurrentlyLoading.emplace_back( pEntity );
        }
    }

    //-------------------------------------------------------------------------

    bool EntityMap::ProcessMapUnloadRequest( EntityLoadingContext const& loadingContext, EntityModel::ActivationContext& activationContext )
    {
        KRG_ASSERT( m_isUnloadRequested );

        //-------------------------------------------------------------------------

        // Ensure that we also deactivate all entities properly
        if ( IsActivated() )
        {
            Deactivate( loadingContext, activationContext );
        }
        else
        {
            if ( m_status != Status::LoadFailed )
            {
                if ( m_isCollectionInstantiated )
                {
                    // Unload entities
                    for ( auto pEntity : m_entities )
                    {
                        KRG_ASSERT( !pEntity->IsActivated() );
                        pEntity->UnloadComponents( loadingContext );
                    }

                    // Delete instantiated entities
                    DestroyAllEntities();
                    m_isCollectionInstantiated = false;
                }

                // Since entity ownership is transferred via the add call, we need to delete all pending add entity requests
                for ( auto pEntity : m_entitiesToAdd )
                {
                    KRG_ASSERT( !pEntity->HasRequestedComponentLoad() );
                    KRG::Delete( pEntity );
                }
                m_entitiesToAdd.clear();

                // Clear all internal entity lists
                m_entitiesCurrentlyLoading.clear();
                m_entitiesToRemove.clear();
            }

            // Unload the map resource
            if ( !m_isTransientMap )
            {
                loadingContext.m_pResourceSystem->UnloadResource( m_pMapDesc );
            }

            m_status = Status::Unloaded;
            m_isUnloadRequested = false;
            return true;
        }

        return false;
    }

    bool EntityMap::ProcessMapLoading( EntityLoadingContext const& loadingContext, EntityModel::ActivationContext& activationContext )
    {
        KRG_ASSERT( m_status == Status::MapLoading );
        KRG_ASSERT( !m_isTransientMap );

        if ( m_pMapDesc.IsLoading() )
        {
            return false;
        }
        else if ( m_pMapDesc.HasLoadingFailed() )
        {
            m_status = Status::LoadFailed;
        }
        else if ( m_pMapDesc.IsLoaded() )
        {
            if ( m_pMapDesc->IsValid() )
            {
                // Create entities
                {
                    KRG_PROFILE_SCOPE_SCENE( "Create Entity Collection" );
                    auto const& collectionDesc = m_pMapDesc->GetCollectionDescriptor();

                    m_ID = m_pMapDesc->GetID();
                    m_entitiesCurrentlyLoading.reserve( collectionDesc.GetNumEntityDescriptors() );
                    EntityCollection::CreateAllEntitiesParallel( *loadingContext.m_pTaskSystem, *loadingContext.m_pTypeRegistry, collectionDesc );
                    EntityCollection::ResolveEntitySpatialAttachments( collectionDesc );
                    m_isCollectionInstantiated = true;
                }

                // Load Entities
                for ( auto pEntity : m_entities )
                {
                    pEntity->LoadComponents( loadingContext );
                    m_entitiesCurrentlyLoading.emplace_back( pEntity );
                }

                m_status = Status::EntitiesLoading;
            }
            else // Invalid map data is treated as a failed load
            {
                m_status = Status::LoadFailed;
            }
        }

        return true;
    }

    void EntityMap::ProcessEntityAdditionAndRemoval( EntityLoadingContext const& loadingContext, EntityModel::ActivationContext& activationContext )
    {
        // Edited Entities
        //-------------------------------------------------------------------------

        #if KRG_DEVELOPMENT_TOOLS
        for ( auto pEntity : m_editedEntities )
        {
            pEntity->EndComponentEditing( loadingContext );
            m_entitiesCurrentlyLoading.emplace_back( pEntity );
        }
        m_editedEntities.clear();
        #endif

        // Addition
        //-------------------------------------------------------------------------

        // Wait until we have a collection to add the entities too since the map might still be loading
        if ( m_isCollectionInstantiated )
        {
            // Add entities to the collection and request load
            for ( auto pEntityToAdd : m_entitiesToAdd )
            {
                EntityCollection::AddEntity( pEntityToAdd );
                pEntityToAdd->LoadComponents( loadingContext );
                m_entitiesCurrentlyLoading.emplace_back( pEntityToAdd );
            }

            m_entitiesToAdd.clear();
        }

        // Removal
        //-------------------------------------------------------------------------

        // Unload and deactivate entities and remove them from the collection
        for ( int32 i = (int32) m_entitiesToRemove.size() - 1; i >= 0; i-- )
        {
            auto& removalRequest = m_entitiesToRemove[i];
            auto pEntityToRemove = removalRequest.m_pEntity;

            // Deactivate if activated
            if ( pEntityToRemove->IsActivated() )
            {
                pEntityToRemove->Deactivate( activationContext );
                continue;
            }
            else // Remove from loading list as we might still be loaded this entity
            {
                m_entitiesCurrentlyLoading.erase_first_unsorted( pEntityToRemove );

                // Unload components and remove from collection
                pEntityToRemove->UnloadComponents( loadingContext );
                EntityCollection::RemoveEntity( pEntityToRemove->m_ID );

                // Destroy the entity if this is a destruction request
                if ( removalRequest.m_shouldDestroy )
                {
                    KRG::Delete( pEntityToRemove );
                }

                // Remove the request from the list
                m_entitiesToRemove.erase_unsorted( m_entitiesToRemove.begin() + i );
            }
        }
    }

    bool EntityMap::ProcessEntityLoadingAndActivation( EntityLoadingContext const& loadingContext, EntityModel::ActivationContext& activationContext )
    {
        struct EntityLoadingTask : public IAsyncTask
        {
            EntityLoadingTask( EntityLoadingContext const& loadingContext, EntityModel::ActivationContext& activationContext, TVector<Entity*>& entitiesToLoad, bool isActivated )
                : m_loadingContext( loadingContext )
                , m_activationContext( activationContext )
                , m_entitiesToLoad( entitiesToLoad )
                , m_isActivated( isActivated )
            {
                m_SetSize = (uint32) m_entitiesToLoad.size();
            }

            virtual void ExecuteRange( TaskSetPartition range, uint32 threadnum ) override final
            {
                KRG_PROFILE_SCOPE_SCENE( "Load and Activate Entities Task" );

                for ( uint32 i = range.start; i < range.end; ++i )
                {
                    auto pEntity = m_entitiesToLoad[i];

                    if ( pEntity->UpdateEntityState( m_loadingContext, m_activationContext ) )
                    {
                        for ( auto pComponent : pEntity->GetComponents() )
                        {
                            KRG_ASSERT( pComponent->IsInitialized() || pComponent->HasLoadingFailed() );
                        }

                        // If the map is activated, immediately activate any entities that finish loading
                        if ( m_isActivated && pEntity->IsLoaded() )
                        {
                            // Prevent us from activating entities whose parents are not yet activated, this ensures that our attachment chain have a consistent activation state
                            if ( !pEntity->HasSpatialParent() || pEntity->GetSpatialParent()->IsActivated() )
                            {
                                pEntity->Activate( m_activationContext );
                            }
                        }
                    }
                    else // Entity is still loading
                    {
                        bool result = m_stillLoadingEntities.enqueue( pEntity );
                        KRG_ASSERT( result );
                    }
                }
            }

        public:

            Threading::LockFreeQueue<Entity*>       m_stillLoadingEntities;

        private:

            EntityLoadingContext const&                   m_loadingContext;
            EntityModel::ActivationContext&         m_activationContext;
            TVector<Entity*>&                       m_entitiesToLoad;
            bool                                    m_isActivated = false;
        };

        //-------------------------------------------------------------------------

        {
            KRG_PROFILE_SCOPE_SCENE( "Load and Activate Entities" );

            //-------------------------------------------------------------------------

            EntityLoadingTask loadingTask( loadingContext, activationContext, m_entitiesCurrentlyLoading, IsActivated() );
            loadingContext.m_pTaskSystem->ScheduleTask( &loadingTask );
            loadingContext.m_pTaskSystem->WaitForTask( &loadingTask );

            //-------------------------------------------------------------------------

            // Track the number of entities that still need loading
            size_t const numEntitiesStillLoading = loadingTask.m_stillLoadingEntities.size_approx();
            m_entitiesCurrentlyLoading.resize( numEntitiesStillLoading );
            size_t numDequeued = loadingTask.m_stillLoadingEntities.try_dequeue_bulk( m_entitiesCurrentlyLoading.data(), numEntitiesStillLoading );
            KRG_ASSERT( numEntitiesStillLoading == numDequeued );
        }

        //-------------------------------------------------------------------------

        // Ensure that we set the status to loaded, if we were in the entity loading stage and all loads completed
        if ( m_status == Status::EntitiesLoading && m_entitiesCurrentlyLoading.empty() )
        {
            KRG_ASSERT( !m_isTransientMap );
            m_status = Status::Loaded;
        }

        //-------------------------------------------------------------------------

        return m_entitiesCurrentlyLoading.empty();
    }

    //-------------------------------------------------------------------------

    bool EntityMap::UpdateState( EntityLoadingContext const& loadingContext, EntityModel::ActivationContext& activationContext )
    {
        KRG_PROFILE_SCOPE_SCENE( "Map Loading" );
        KRG_ASSERT( Threading::IsMainThread() && loadingContext.IsValid() );
        KRG_ASSERT( m_entitiesToHotReload.empty() );

        //-------------------------------------------------------------------------

        Threading::RecursiveScopeLock lock( m_mutex );

        //-------------------------------------------------------------------------

        // Process the request and return immediately if it isnt completed
        if ( m_isUnloadRequested )
        {
            if ( !ProcessMapUnloadRequest( loadingContext, activationContext ) )
            {
                return false;
            }
        }

        //-------------------------------------------------------------------------

        // Wait for the map descriptor to finish loading
        if ( m_status == Status::MapLoading )
        {
            if ( !ProcessMapLoading( loadingContext, activationContext ) )
            {
                return false;
            }
        }

        //-------------------------------------------------------------------------

        ProcessEntityAdditionAndRemoval( loadingContext, activationContext );
        return ProcessEntityLoadingAndActivation( loadingContext, activationContext );
    }

    //-------------------------------------------------------------------------

    #if KRG_DEVELOPMENT_TOOLS
    void EntityMap::ComponentEditingDeactivate( EntityModel::ActivationContext& activationContext, UUID const& entityID, UUID const& componentID )
    {
        KRG_ASSERT( Threading::IsMainThread() );

        auto pEntity = FindEntity( entityID );
        KRG_ASSERT( pEntity != nullptr );
        pEntity->ComponentEditingDeactivate( activationContext, componentID );

        {
            Threading::RecursiveScopeLock lock( m_mutex );
            if ( std::find( m_editedEntities.begin(), m_editedEntities.end(), pEntity ) == m_editedEntities.end() )
            {
                m_editedEntities.emplace_back( pEntity );
            }
        }
    }

    void EntityMap::ComponentEditingUnload( EntityLoadingContext const& loadingContext, UUID const& entityID, UUID const& componentID )
    {
        KRG_ASSERT( Threading::IsMainThread() );

        auto pEntity = FindEntity( entityID );
        KRG_ASSERT( pEntity != nullptr );
        KRG_ASSERT( VectorContains( m_editedEntities, pEntity ) );
        pEntity->ComponentEditingUnload( loadingContext, componentID );
    }

    //-------------------------------------------------------------------------

    void EntityMap::HotReloadDeactivateEntities( EntityModel::ActivationContext& activationContext, TVector<Resource::ResourceRequesterID> const& usersToReload )
    {
        KRG_ASSERT( Threading::IsMainThread() );
        KRG_ASSERT( !usersToReload.empty() );
        KRG_ASSERT( m_entitiesToHotReload.empty() );

        // Generate list of entities to be reloaded
        for ( auto const& requesterID : usersToReload )
        {
            // See if the entity that needs a reload is in this map
            Entity* pFoundEntity = FindEntity( requesterID.GetID() );
            if ( pFoundEntity != nullptr )
            {
                m_entitiesToHotReload.emplace_back( pFoundEntity );
            }
        }

        // Request deactivation for any entities that are activated
        for ( auto pEntityToHotReload : m_entitiesToHotReload )
        {
            if ( pEntityToHotReload->IsActivated() )
            {
                pEntityToHotReload->Deactivate( activationContext );
            }
        }
    }

    void EntityMap::HotReloadUnloadEntities( EntityLoadingContext const& loadingContext )
    {
        KRG_ASSERT( Threading::IsMainThread() );

        Threading::RecursiveScopeLock lock( m_mutex );

        for ( auto pEntityToHotReload : m_entitiesToHotReload )
        {
            KRG_ASSERT( !pEntityToHotReload->IsActivated() );

            // We might still be loading this entity so remove it from the loading requests
            m_entitiesCurrentlyLoading.erase_first_unsorted( pEntityToHotReload );

            // Request unload of the components (client system needs to ensure that all resource requests are processed)
            pEntityToHotReload->UnloadComponents( loadingContext );
        }
    }

    void EntityMap::HotReloadLoadEntities( EntityLoadingContext const& loadingContext )
    {
        KRG_ASSERT( Threading::IsMainThread() );

        Threading::RecursiveScopeLock lock( m_mutex );

        for ( auto pEntityToHotReload : m_entitiesToHotReload )
        {
            KRG_ASSERT( pEntityToHotReload->IsUnloaded() );
            pEntityToHotReload->LoadComponents( loadingContext );
            m_entitiesCurrentlyLoading.emplace_back( pEntityToHotReload );
        }

        m_entitiesToHotReload.clear();
    }
#endif
}