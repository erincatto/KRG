//-------------------------------------------------------------------------
// This is an auto-generated file - DO NOT edit
//-------------------------------------------------------------------------

#include "D:\Kruger\Code\Engine\Render\_Module\_AutoGenerated\2895451261.h"

//-------------------------------------------------------------------------
// Enum Helper: KRG::Render::Mobility
//-------------------------------------------------------------------------

namespace KRG
{
    namespace TypeSystem
    {
        namespace EnumHelpers
        {
            void EnumHelper_KRG_Render_Mobility::RegisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                TypeSystem::TypeInfo typeInfo;
                typeInfo.m_ID = TypeSystem::TypeID( "KRG::Render::Mobility" );
                typeInfo.m_size = sizeof( KRG::Render::Mobility );
                typeInfo.m_alignment = alignof( KRG::Render::Mobility );
                typeRegistry.RegisterType( typeInfo );

                TypeSystem::EnumInfo enumInfo;
                enumInfo.m_ID = TypeSystem::TypeID( "KRG::Render::Mobility" );
                enumInfo.m_underlyingType = TypeSystem::CoreTypes::S32;
                enumInfo.m_constants.insert( TPair<StringID, S64>( StringID( "Dynamic" ), 1 ) );
                enumInfo.m_constants.insert( TPair<StringID, S64>( StringID( "Static" ), 0 ) );

                typeRegistry.RegisterEnum( enumInfo );
            }

            void EnumHelper_KRG_Render_Mobility::UnregisterEnum( TypeSystem::TypeRegistry& typeRegistry )
            {
                auto const ID = TypeSystem::TypeID( "KRG::Render::Mobility" );
                typeRegistry.UnregisterType( ID );
                typeRegistry.UnregisterEnum( ID );
            }
        }
    }
}

//-------------------------------------------------------------------------
// TypeHelper: KRG::Render::StaticMeshComponent
//-------------------------------------------------------------------------

namespace KRG
{
    TypeSystem::TypeInfo const* KRG::Render::StaticMeshComponent::TypeInfoPtr = nullptr;
    namespace TypeSystem
    {
        namespace TypeHelpers
        {
            void const* TTypeHelper<KRG::Render::StaticMeshComponent>::DefaultTypeInstancePtr = nullptr;

            TTypeHelper<KRG::Render::StaticMeshComponent> TTypeHelper<KRG::Render::StaticMeshComponent>::StaticTypeHelper;
        }
    }

    TypeSystem::TypeInfo const* KRG::Render::StaticMeshComponent::GetTypeInfo() const
    {
        return KRG::Render::StaticMeshComponent::TypeInfoPtr;
    }

    void KRG::Render::StaticMeshComponent::Load( EntityLoadingContext const& context, UUID requesterID )
    {
        KRG::Render::StaticMeshComponent::TypeInfoPtr->m_pTypeHelper->LoadResources( context.m_pResourceSystem, requesterID, this );
        m_status = Status::Loading;
    }

    void KRG::Render::StaticMeshComponent::Unload( EntityLoadingContext const& context, UUID requesterID )
    {
        KRG::Render::StaticMeshComponent::TypeInfoPtr->m_pTypeHelper->UnloadResources( context.m_pResourceSystem, requesterID, this );
        m_status = Status::Unloaded;
    }

    void KRG::Render::StaticMeshComponent::UpdateLoading()
    {
        if( m_status == Status::Loading )
        {
            auto const resourceLoadingStatus = KRG::Render::StaticMeshComponent::TypeInfoPtr->m_pTypeHelper->GetResourceLoadingStatus( this );
            if ( resourceLoadingStatus == LoadingStatus::Loading )
            {
                return; // Something is still loading so early-out
            }

            if ( resourceLoadingStatus == LoadingStatus::Failed )
            {
                m_status = EntityComponent::Status::LoadingFailed;
            }
            else
            {
                m_status = EntityComponent::Status::Loaded;
            }
        }
    }
}
